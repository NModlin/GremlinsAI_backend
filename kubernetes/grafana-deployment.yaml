---
# Grafana ConfigMap for datasources and dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: gremlinsai
  labels:
    app: grafana
    component: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: "15s"
          queryTimeout: "60s"
          httpMethod: "POST"
        secureJsonData: {}

---
# Grafana ConfigMap for configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: gremlinsai
  labels:
    app: grafana
    component: monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true

    [grafana_net]
    url = https://grafana.net

    [log]
    mode = console
    level = info

    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [server]
    root_url = http://localhost:3000/
    serve_from_sub_path = false

    [database]
    type = sqlite3
    path = grafana.db

    [session]
    provider = file

    [security]
    admin_user = admin
    admin_password = admin123
    secret_key = SW2YcwTIb9zpOOhoPsMm
    disable_gravatar = false

    [snapshots]
    external_enabled = true
    external_snapshot_url = https://snapshots-origin.raintank.io
    external_snapshot_name = Publish to snapshot.raintank.io

    [dashboards]
    default_home_dashboard_path = /var/lib/grafana/dashboards/gremlinsai-overview.json

    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_role = Viewer

    [auth.anonymous]
    enabled = false

    [smtp]
    enabled = false

    [emails]
    welcome_email_on_sign_up = false

    [alerting]
    enabled = true
    execute_alerts = true

---
# Grafana Dashboard Provisioning ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-provisioning
  namespace: gremlinsai
  labels:
    app: grafana
    component: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
# Grafana Dashboards ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: gremlinsai
  labels:
    app: grafana
    component: monitoring
data:
  gremlinsai-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GremlinsAI Backend - AI Metrics Dashboard",
        "tags": ["gremlinsai", "ai", "monitoring", "production"],
        "style": "dark",
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "API Request Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(gremlinsai_api_requests_total[5m]))",
                "legendFormat": "Requests/sec",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 10},
                    {"color": "red", "value": 50}
                  ]
                },
                "unit": "reqps"
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "LLM Response Time (95th percentile)",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(gremlinsai_llm_response_duration_seconds_bucket[5m])) by (le))",
                "legendFormat": "95th percentile",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 10},
                    {"color": "red", "value": 30}
                  ]
                },
                "unit": "s"
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "Agent Tool Success Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(gremlinsai_agent_tool_usage_total{status=\"success\"}[5m])) / sum(rate(gremlinsai_agent_tool_usage_total[5m]))",
                "legendFormat": "Success Rate",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": null},
                    {"color": "yellow", "value": 0.8},
                    {"color": "green", "value": 0.95}
                  ]
                },
                "unit": "percentunit",
                "min": 0,
                "max": 1
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "RAG Relevance Score (Median)",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.50, sum(rate(gremlinsai_rag_relevance_score_bucket[5m])) by (le))",
                "legendFormat": "Median Score",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": null},
                    {"color": "yellow", "value": 0.3},
                    {"color": "green", "value": 0.7}
                  ]
                },
                "unit": "short",
                "min": 0,
                "max": 1
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          }
        ],
        "schemaVersion": 30,
        "version": 1
      }
    }

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: gremlinsai
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: grafana
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          ports:
            - containerPort: 3000
              name: web
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboard-provisioning
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
            - name: grafana-storage
              mountPath: /var/lib/grafana
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 30
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 5
            failureThreshold: 3
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboard-provisioning
          configMap:
            name: grafana-dashboard-provisioning
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: gremlinsai
  labels:
    app: grafana
    component: monitoring
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: web
  selector:
    app: grafana

---
# Grafana ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: gremlinsai

---
# Grafana Secret for admin password
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: gremlinsai
  labels:
    app: grafana
    component: monitoring
type: Opaque
data:
  admin-password: YWRtaW4xMjM=  # base64 encoded "admin123"

---
# Grafana PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: gremlinsai
  labels:
    app: grafana
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# Grafana Ingress (optional)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: gremlinsai
  labels:
    app: grafana
    component: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
    - hosts:
        - grafana.gremlinsai.com
      secretName: grafana-tls
  rules:
    - host: grafana.gremlinsai.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana-service
                port:
                  number: 3000
