---
# Production Service Configuration for Blue-Green Deployment
# This service will switch between blue and green deployments
apiVersion: v1
kind: Service
metadata:
  name: gremlinsai-service
  namespace: gremlinsai
  labels:
    app: gremlinsai-backend
    tier: production
    deployment-strategy: blue-green
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: https
      port: 443
      targetPort: 8080
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 8080
      protocol: TCP
  selector:
    app: gremlinsai-backend
    # version selector will be updated by blue-green deployment script
    # Initially set to blue, will switch between blue/green
    version: blue
  sessionAffinity: None

---
# Headless Service for Internal Communication
apiVersion: v1
kind: Service
metadata:
  name: gremlinsai-headless
  namespace: gremlinsai
  labels:
    app: gremlinsai-backend
    tier: production
    service-type: headless
spec:
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: gremlinsai-backend
    # This service sees all versions for internal communication
  publishNotReadyAddresses: false

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: gremlinsai-backend
  namespace: gremlinsai
  labels:
    app: gremlinsai-backend
    tier: production
spec:
  selector:
    matchLabels:
      app: gremlinsai-backend
  endpoints:
    - port: metrics
      path: /api/v1/metrics
      interval: 30s
      scrapeTimeout: 10s
      honorLabels: true
  namespaceSelector:
    matchNames:
      - gremlinsai

---
# Ingress for External Access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gremlinsai-ingress
  namespace: gremlinsai
  labels:
    app: gremlinsai-backend
    tier: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    # CORS headers
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
    - hosts:
        - api.gremlinsai.com
        - gremlinsai.com
      secretName: gremlinsai-tls
  rules:
    - host: api.gremlinsai.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gremlinsai-service
                port:
                  number: 80
    - host: gremlinsai.com
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: gremlinsai-service
                port:
                  number: 80

---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: gremlinsai-network-policy
  namespace: gremlinsai
  labels:
    app: gremlinsai-backend
    tier: production
spec:
  podSelector:
    matchLabels:
      app: gremlinsai-backend
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow traffic from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8080
    # Allow traffic from monitoring
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
    # Allow internal communication
    - from:
        - podSelector:
            matchLabels:
              app: gremlinsai-backend
      ports:
        - protocol: TCP
          port: 8080
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow HTTPS outbound (for external APIs)
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow HTTP outbound (for health checks)
    - to: []
      ports:
        - protocol: TCP
          port: 80
    # Allow database connections
    - to: []
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
    # Allow Weaviate connections
    - to: []
      ports:
        - protocol: TCP
          port: 8080  # Weaviate
    # Allow Ollama connections
    - to: []
      ports:
        - protocol: TCP
          port: 11434  # Ollama

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gremlinsai-pdb
  namespace: gremlinsai
  labels:
    app: gremlinsai-backend
    tier: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: gremlinsai-backend

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gremlinsai-hpa
  namespace: gremlinsai
  labels:
    app: gremlinsai-backend
    tier: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gremlinsai-backend-blue  # Will be updated by deployment script
  minReplicas: 3
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Min
